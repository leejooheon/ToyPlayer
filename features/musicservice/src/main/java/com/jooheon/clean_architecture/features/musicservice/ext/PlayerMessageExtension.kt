package com.jooheon.clean_architecture.features.musicservice.ext

import androidx.media3.common.PlaybackException
import androidx.media3.common.Player
import androidx.media3.exoplayer.ExoPlayer

fun Int.playerState() = when(this) {
    ExoPlayer.STATE_IDLE -> "STATE_IDLE"
    ExoPlayer.STATE_BUFFERING -> "STATE_BUFFERING"
    ExoPlayer.STATE_READY -> "STATE_READY"
    ExoPlayer.STATE_ENDED -> "STATE_ENDED"
    else -> throw IllegalStateException("Unknown playbackState.")
}
fun Int.mediaItemTransitionReason() = when(this) {
    Player.MEDIA_ITEM_TRANSITION_REASON_REPEAT -> "MEDIA_ITEM_TRANSITION_REASON_REPEAT"
    Player.MEDIA_ITEM_TRANSITION_REASON_AUTO, -> "MEDIA_ITEM_TRANSITION_REASON_AUTO"
    Player.MEDIA_ITEM_TRANSITION_REASON_SEEK -> "MEDIA_ITEM_TRANSITION_REASON_SEEK"
    Player.MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED -> "MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED"
    else -> throw IllegalStateException("Unknown MediaItemTransitionReason")
}
fun Int.playWhenReadyChangeReason() = when(this) {
    Player.PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST -> "PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST"
    Player.PLAY_WHEN_READY_CHANGE_REASON_AUDIO_FOCUS_LOSS, -> "PLAY_WHEN_READY_CHANGE_REASON_AUDIO_FOCUS_LOSS"
    Player.PLAY_WHEN_READY_CHANGE_REASON_AUDIO_BECOMING_NOISY -> "PLAY_WHEN_READY_CHANGE_REASON_AUDIO_BECOMING_NOISY"
    Player.PLAY_WHEN_READY_CHANGE_REASON_REMOTE -> "PLAY_WHEN_READY_CHANGE_REASON_REMOTE"
    Player.PLAY_WHEN_READY_CHANGE_REASON_END_OF_MEDIA_ITEM -> "PLAY_WHEN_READY_CHANGE_REASON_END_OF_MEDIA_ITEM"
    Player.PLAY_WHEN_READY_CHANGE_REASON_SUPPRESSED_TOO_LONG -> "PLAY_WHEN_READY_CHANGE_REASON_SUPPRESSED_TOO_LONG"
    else -> throw IllegalStateException("Unknown MediaItemTransitionReason")
}
fun Int.timelineChangeReason() = when(this) {
    Player.TIMELINE_CHANGE_REASON_PLAYLIST_CHANGED -> "PLAY_WHEN_READY_CHANGE_REASON_USER_REQUEST"
    Player.TIMELINE_CHANGE_REASON_SOURCE_UPDATE, -> "PLAY_WHEN_READY_CHANGE_REASON_AUDIO_FOCUS_LOSS"
    else -> throw IllegalStateException("Unknown MediaItemTransitionReason")
}
fun Int.playbackErrorReason() = when(this) {
    PlaybackException.ERROR_CODE_UNSPECIFIED -> "ERROR_CODE_UNSPECIFIED"
    PlaybackException.ERROR_CODE_REMOTE_ERROR -> "ERROR_CODE_REMOTE_ERROR"
    PlaybackException.ERROR_CODE_BEHIND_LIVE_WINDOW -> "ERROR_CODE_BEHIND_LIVE_WINDOW"
    PlaybackException.ERROR_CODE_TIMEOUT -> "ERROR_CODE_TIMEOUT"
    PlaybackException.ERROR_CODE_FAILED_RUNTIME_CHECK -> "ERROR_CODE_FAILED_RUNTIME_CHECK"
    PlaybackException.ERROR_CODE_IO_UNSPECIFIED -> "ERROR_CODE_IO_UNSPECIFIED"
    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED -> "ERROR_CODE_IO_NETWORK_CONNECTION_FAILED"
    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT -> "ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT"
    PlaybackException.ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE -> "ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE"
    PlaybackException.ERROR_CODE_IO_BAD_HTTP_STATUS -> "ERROR_CODE_IO_BAD_HTTP_STATUS"
    PlaybackException.ERROR_CODE_IO_FILE_NOT_FOUND -> "ERROR_CODE_IO_FILE_NOT_FOUND"
    PlaybackException.ERROR_CODE_IO_NO_PERMISSION -> "ERROR_CODE_IO_NO_PERMISSION"
    PlaybackException.ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED -> "ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED"
    PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE -> "ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE"
    PlaybackException.ERROR_CODE_PARSING_CONTAINER_MALFORMED -> "ERROR_CODE_PARSING_CONTAINER_MALFORMED"
    PlaybackException.ERROR_CODE_PARSING_MANIFEST_MALFORMED -> "ERROR_CODE_PARSING_MANIFEST_MALFORMED"
    PlaybackException.ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED -> "ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED"
    PlaybackException.ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED -> "ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED"
    PlaybackException.ERROR_CODE_DECODER_INIT_FAILED -> "ERROR_CODE_DECODER_INIT_FAILED"
    PlaybackException.ERROR_CODE_DECODER_QUERY_FAILED -> "ERROR_CODE_DECODER_QUERY_FAILED"
    PlaybackException.ERROR_CODE_DECODING_FAILED -> "ERROR_CODE_DECODING_FAILED"
    PlaybackException.ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES -> "ERROR_CODE_DECODING_FORMAT_EXCEEDS_CAPABILITIES"
    PlaybackException.ERROR_CODE_DECODING_FORMAT_UNSUPPORTED -> "ERROR_CODE_DECODING_FORMAT_UNSUPPORTED"
    PlaybackException.ERROR_CODE_AUDIO_TRACK_INIT_FAILED -> "ERROR_CODE_AUDIO_TRACK_INIT_FAILED"
    PlaybackException.ERROR_CODE_AUDIO_TRACK_WRITE_FAILED -> "ERROR_CODE_AUDIO_TRACK_WRITE_FAILED"
    PlaybackException.ERROR_CODE_DRM_UNSPECIFIED -> "ERROR_CODE_DRM_UNSPECIFIED"
    PlaybackException.ERROR_CODE_DRM_SCHEME_UNSUPPORTED -> "ERROR_CODE_DRM_SCHEME_UNSUPPORTED"
    PlaybackException.ERROR_CODE_DRM_PROVISIONING_FAILED -> "ERROR_CODE_DRM_PROVISIONING_FAILED"
    PlaybackException.ERROR_CODE_DRM_CONTENT_ERROR -> "ERROR_CODE_DRM_CONTENT_ERROR"
    PlaybackException.ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED -> "ERROR_CODE_DRM_LICENSE_ACQUISITION_FAILED"
    PlaybackException.ERROR_CODE_DRM_DISALLOWED_OPERATION -> "ERROR_CODE_DRM_DISALLOWED_OPERATION"
    PlaybackException.ERROR_CODE_DRM_SYSTEM_ERROR -> "ERROR_CODE_DRM_SYSTEM_ERROR"
    PlaybackException.ERROR_CODE_DRM_DEVICE_REVOKED -> "ERROR_CODE_DRM_DEVICE_REVOKED"
    PlaybackException.ERROR_CODE_DRM_LICENSE_EXPIRED -> "ERROR_CODE_DRM_LICENSE_EXPIRED"
    else -> throw IllegalStateException("Unknown PlaybackError")
}
